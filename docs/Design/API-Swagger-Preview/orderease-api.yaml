swagger: "2.0"
info:
  description: "OrderEase RESTful API"
  version: "1.0"
  title: "OrderEase API"
host: "orderease.ml"
basePath: "/v1"


# API
schemes:
- "https"
paths:
  # CUser
  /cusers/session:
    post:
      tags:
      - "cuser"
      summary: "2C: 顾客登出"
      parameters: 
      - in: "body"
        name: "body"
        description: "user info for login"
        required: true
        schema:
          type: object
          properties:
            username: 
              type: string
              example: "simpleUsername"
      responses:
        200:
          description: "successfully login"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully login."
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."

    put:
      tags:
      - "cuser"
      summary: "2C: 顾客登出"
      responses:
        200:
          description: "successfully logout"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully logout"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  # BUser 
  /busers/:
    post:
      tags:
      - "buser"
      summary: "2B: 新建商家用户"
      parameters: 
      - in: "body"
        name: "body"
        description: "register info"
        required: true
        schema:
          type: object
          properties:
            username: 
              type: string
              example: simpleUsername
            password:
              type: string
              example: naviePassword
            authority:
              type: string
              example: manager
      responses:
        200:
          description: "successfully register"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully register"
        400:
          description: "invalid username or password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."

  /busers:
    put:
      tags:
      - "buser"
      summary: "2B: 商家改密码"
      parameters: 
      - in: "body"
        name: "body"
        description: "register info"
        required: true
        schema:
          type: object
          properties:
            password:
              type: string
              example: naviePassword
      responses:
        200:
          description: "successfully change password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Change password successfully."
        400:
          description: "invalid password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid password."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /busers/session:
    post:
      tags:
      - "buser"
      summary: "2B: 商家登录"
      parameters: 
      - in: "body"
        name: "body"
        description: "user info for login"
        required: true
        schema:
          type: object
          properties:
            username: 
              type: string
              example: simpleUsername
            password:
              type: string
              example: naviePassword
      responses:
        200:
          description: "successfully login"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully login."
        401:
          description: "invalid username or password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid username or password."
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."
        
    put:
      tags:
      - "buser"
      summary: "2B: 商家登出"
      responses:
        200:
          description: "successfully logout"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully logout."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required"

  # Menu
  /menus/:  
    post:
      tags:
      - "menu"
      summary: "2B: 给该餐馆新建菜单"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "只需要菜单名，排序，是否使用"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              example: "春季菜单"
            rank:
              type: integer
              example: 1
            used:
              type: boolean
              example: 1
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Add a new menu successfully"
              id:
                type: integer
                example: 1
    
    get:
      tags:
      - "menu"
      summary: "2B: 获取所有菜单"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful delete for menu info"
          schema:
            type: object
            properties:
              menus:
                type: array 
                items:
                  $ref: "#/definitions/Menu"
        404:
          description: "Menu not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Menu not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
  
  /menus/<menuid>:    
    put:
      tags:
      - "menu"
      summary: "2B: 给该餐馆修改菜单"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "不要使用该api修改类别和菜！"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              example: "春季菜单"
            rank:
              type: integer
              example: 1
            used:
              type: boolean
              example: 1
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Modify a new menu successfully"
                
    get:
      tags:
      - "menu"
      summary: "2B: 获取某一菜单"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful query for menu info"
          schema:
            $ref: "#/definitions/Menu"
        404:
          description: "Menu not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Menu not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    delete:
      tags:
      - "menu"
      summary: "2B: 删除某一菜单"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful delete for menu info"
          schema:  
            type: object
            properties:
              message:
                type: string
                example: "OK"
        404:
          description: "Menu not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Menu not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
 

  /menus/<menuid>/categories/:
    post:
      tags:
      - "category"
      summary: "2B: 在某一菜单下新增一个类别"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "不需要id和dishes"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        200:
          description: "add a new category successfully"
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 3910
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
      
  /menus/<menuid>/categories/<catId>:
    delete:
      tags:
      - "category"
      summary: "2B: 在某一菜单下删除一个类别"
      consumes:
      - "application/json"
      responses:
        444:
          description: "error message"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        200:
          description: "delete a category successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: OK
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
    
    put:
      tags:
      - "category"
      summary: "2B: 在某一菜单下修改一个类别"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "不需要id和dishes, 只需提交要修改的字段, 请不要在这里修改dish"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        444:
          description: "error message"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        200:
          description: "delete a category successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: OK
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
  
  /menus/<menuid>/categories/<catId>/dishes/:
    # Add A New Dish
    post:
      tags:
      - "dish"
      summary: "2B: 在某一菜单下新增一个菜"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Dish object to add into database. Id is not needed"
        required: true
        schema:
          $ref: "#/definitions/Dish"
      responses:
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        200:
          description: "add a new dish successfully"
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 3910
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
  
  # /menu/<menuid>/dish/type/<cat>:
  #   get:
  #     tags:
  #     - "menu&dish"
  #     summary: "2B&2C: 获取一个类别的所有菜"
  #     consumes:
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "Identifier of the dishes list"
  #       required: true
  #       schema:
  #         # Identifier of the dish
  #         type: object
  #         properties:
  #           type:
  #             type: string
  #             example: "荤菜"
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           type: object
  #           properties:
  #             type:
  #               type: string
  #               example: "荤菜"
  #             dishes:
  #               type: array
  #               items:
  #                 $ref: "#/definitions/Dish"
  #       404:
  #         description: "type not found"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: string
  #               example: "type not found"
  #       401:
  #         description: "login required"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: string
  #               example: "Login required"
                        
  
  /menus/<menuid>/categories/<catId>/dishes/<dishId>:      
    # Get A Specific Info of A Dish
    get:
      tags:
      - "dish"
      summary: "2B&2C: 获取一个菜"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful query for dish info"
          schema:
            $ref: "#/definitions/Dish"
        404:
          description: "dish not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

    # Update Info of A Dish
    put:
      tags:
      - "dish"
      summary: "2B: 更新一个菜"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Dish object with update information. Id is not needed"
        required: true
        schema:
          $ref: "#/definitions/Dish"
      responses:
        200:
          description: "Successful update"
        404:
          description: "dish Not Found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found"
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required"
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
              
    # DELETE A Dish
    delete:
      tags:
      - "dish"
      summary: "2B: 删除一个菜"
      consumes:
      - "application/json"
      responses:
        200:
          description: "successfully delete"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully delete."
        404:
          description: "dish not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority"
  
  # restaurant information
  /restrt:
    get:
      tags:
      - "restrt"
      summary: "2C: 获取餐馆信息"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Restaurant"
        404:
          description: "restaurant not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found"
  
    put:
      tags:
      - "restrt"
      summary: "2B: 修改餐馆信息"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Dishes format should be '<dishId>, <dishId>...'"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              example: "点都德"
            description:
              type: string
              example: "一个吃饭的地方"
            img:
              type: string
              example: example.com/1.jpg
            open:
              type: string
              format: date-time
              example: "2017-11-23 16:10:10"
            close:
              type: string
              format: date-time
              example: "2017-11-23 16:10:10"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Modify restrt info successfully."

  # Customer Operation
  /orders/cuser/:
    post:
      tags:
      - "order"
      summary: "用户提交订单, total为原总价, due为折后总价"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "提交订单"
        required: true
        schema:
          type: object
          properties:
            tableId:
              type: string
              example: "23E"
            total:
              type: number
              format: float
              example: 100.8
            due:
              type: number
              format: float
              example: 90.8
            content:
              type: array
              items:
                type: object
                properties:
                  dish:
                    type: integer
                    example: 1
                  quantity:
                    type: integer
                    example: 2
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orderId:
                type: integer
                example: 4396
        400:
          description: "wrong order"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[invalid order form message]"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
                
    get:
      tags:
      - "order"
      summary: "2C: 用户获取全部订单"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orders:
                type: array
                items:
                  $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required and you can only get your own order(s)."
  
  /orders/cuser/oid/<orderid>:      
    get:
      tags:
      - "order"
      summary: "2C: 用户获取单个订单"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    put:
      tags:
      - "order"
      summary: "用户修改订单信息"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "可以修改的字段: orderItem中的urge和like."
        required: true
        schema:
          type: object
          properties:
            dishId:
              type: integer
              example: 123
            like:
              type: integer
              example: 1
            urge:
              type: integer
              example: 2
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully modify."
    
    post:
      tags:
      - "order"
      summary: "2C: 订单付款"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "payment id and the corresponding order id"
        required: true
        schema:
          type: object
          properties:
            payId:
              type: integer
              example: 2200
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully pay."
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        400:
          description: "ayid is wrong, no such payment"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Payid is wrong, no such payment."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /orders/buser/oid/<orderId>:      
    get:
      tags:
      - "order"
      summary: "2B: 商家获取一个订单"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required and you can only get your own order."
    
    put:
      tags:
      - "order"
      summary: "商家修改订单"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "可以修改的字段: orderItem中的finished和time."
        required: true
        schema:
          type: object
          properties:
            dishId: 
              type: integer
              example: 123
            time:
              type: string
              format: date-time
              example: "2018-06-21 19:00:00"
            finished:
              type: integer
              example: 1
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully modify."

  /orders/buser/:      
    get:
      tags:
      - "order"
      summary: "2B: 商家获取全部订单"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orders:
                type: array
                items:
                  $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /promotions/:      
    get:
      tags:
      - "promotion"
      summary: "获取活动列表"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              promotions:
                type: array
                items:
                  $ref: "#/definitions/Promotion"
        404:
          description: "promotions not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Promotions not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

    post:
      tags:
      - "promotion"
      summary: "新建活动"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "新建活动,只需要theme, begin, end, isend"
        required: true
        schema:
          $ref: "#/definitions/Promotion"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /promotions/<pid>:
    get:
      tags:
      - "promotion"
      summary: "获取单个活动"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Promotion"
        404:
          description: "promotion not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Promotion not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    put:
      tags:
      - "promotion"
      summary: "修改某个活动"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "修改活动,可以修改theme, begin, end, isend"
        required: true
        schema:
          $ref: "#/definitions/Promotion"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "modify promotion successfully"
        404:
          description: "promotion not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Promotion not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    delete:
      tags:
      - "promotion"
      summary: "删除某个活动"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "delete promotion successfully"
        404:
          description: "promotion not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Promotion not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /promotions/<pid>/rules/:
    post:
      tags:
      - "rule"
      summary: "新建活动规则"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "新建活动规则"
        required: true
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /promotions/<pid>/rules/<rid>:
    get:
      tags:
      - "rule"
      summary: "获取单个活动规则"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Rule"
        404:
          description: "rule not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "rule not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    put:
      tags:
      - "rule"
      summary: "修改某个活动规则"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "修改活动规则"
        required: true
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Rule"
        404:
          description: "rule not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "rule not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
    
    delete:
      tags:
      - "rule"
      summary: "删除某个活动规则"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "delete rule successfully"
        404:
          description: "rule not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "rule not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

# Data Models
definitions:
  Dish:
    type: object
    properties:
      id:
        type: integer
        example: 3910
      name:
        type: string
        example: "毛血旺"
      rank:
        type: integer
        example: 1
      img:
        type: string
        example: "example.com/maoxuewan.jpg"
      price:
        type: number
        format: "float"
        example: 28.5
      stock:
        type: integer
        example: 99
      avaliable:
        type: integer
        example: 1
      likes:
        type: integer
        example: 4
      description:
        type: string
        example: "Hello 毛血旺"
    required:
    - name
    - price

  Menu:
    type: object
    properties:
      id:
        type: integer
        example: 10
      name:
        type: string
        example: "springMenu"
      used:
        type: integer
        example: 1
      content:
        type: array
        items:
          $ref: "#/definitions/Category"
    required:
    - name

  Order:
    type: object
    properties:
      id:
        type: integer
        example: 4396
      userId:
        type: integer
        example: 10
      tableId:
        type: string
        example: "23E"
      total:
        type: number
        format: float
        example: 108.3
      due:
        type: number
        format: float
        example: 92.3
      isPay:
        type: integer
        example: 1
      payWay:
        type: string
        example: alipay
      payDate:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      payId:
        type: integer
        example: 123
      dishes:
        type: array
        items:
          $ref: "#/definitions/Dish"
      orderItems:
        type: array
        items:
          $ref: "#/definitions/OrderItem"
      finished:
        type: integer
        example: 1
  
  OrderItem:
    type: object
    properties:
      id:
        type: integer
        example: 1
      orderId:
        type: integer
        example: 2
      dishId:
        type: integer
        example: 3
      quantity:
        type: integer
        example: 2
      finished:
        type: integer
        example: 1
      time:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      urge:
        type: integer
        example: 1
      like:
        type: integer
        example: 0

  Promotion:
    type: object
    properties:
      id:
        type: integer
        example: 1
      theme:
        type: string
        example: 端午节活动
      begin:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      end:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      isend:
        type: integer
        example: 1
      rules:
        type: array
        items:
          $ref: "#/definitions/Rule"
  
  Rule:
    type: object
    properties:
      id: 
        type: integer
        example: 1
      mode:
        type: integer
        example: 1(满减), 2(满折)
      requirement:
        type: number
        format: float
        example: 100.0
      discount:
        type: number
        format: float
        example: 10.0

  Category:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: 荤菜
      rank:
        type: integer
        example: 1
      dishes:
        type: array
        items:
          $ref: "#/definitions/Dish"

  Restaurant:
    type: object
    properties:
      name:
        type: string
        example: 点都德
      description:
        type: string
        example: ddd
      img:
        type: string
        example: "example.com/1.jpg"
      open:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      close:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      menus:
        type: array
        items:
          $ref: "#/definitions/Menu"
      carousels:
        type: array
        items:
          $ref: "#/definitions/Carousel"

  Carousel:
    type: object
    properties:
      id:
        type: number
        example: 1
      info:
        type: string
        example: "some info here"
      img:
        type: string
        example: "example.com/1.jpg"
  