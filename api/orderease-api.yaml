swagger: "2.0"
info:
  description: "OrderEase RESTful API"
  version: "1.0"
  title: "OrderEase API"
host: "orderease.ml"
basePath: "/v1"


# API
schemes:
- "https"
paths:
  # CUser
  /cuser/session:
    post:
      tags:
      - "cuser"
      summary: "2C: user login"
      parameters: 
      - in: "body"
        name: "body"
        description: "user info for login"
        required: true
        schema:
          type: object
          properties:
            username: 
              type: string
              example: "simpleUsername"
      responses:
        200:
          description: "successfully login"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully login."
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."

    put:
      tags:
      - "cuser"
      summary: "2C: user logout"
      responses:
        200:
          description: "successfully logout"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully logout"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  # BUser 
  /buser/:
    post:
      tags:
      - "buser"
      summary: "2B: create a new user"
      parameters: 
      - in: "body"
        name: "body"
        description: "register info"
        required: true
        schema:
          type: object
          properties:
            restId:
              type: string
              example: DDD123
            username: 
              type: string
              example: simpleUsername
            password:
              type: string
              example: naviePassword
            authority:
              type: string
              example: manager
      responses:
        200:
          description: "successfully register"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully register"
        400:
          description: "invalid username or password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."

  /buser/<id>:
    put:
      tags:
      - "buser"
      summary: "2B: change password"
      parameters: 
      - in: "body"
        name: "body"
        description: "register info"
        required: true
        schema:
          type: object
          properties:
            password:
              type: string
              example: naviePassword
      responses:
        200:
          description: "successfully change password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Change password successfully."
        400:
          description: "invalid password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid password."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /buser/session:
    post:
      tags:
      - "buser"
      summary: "2B: user login"
      parameters: 
      - in: "body"
        name: "body"
        description: "user info for login"
        required: true
        schema:
          type: object
          properties:
            username: 
              type: string
              example: simpleUsername
            restId:
              type: string
              example: DDD123
            password:
              type: string
              example: naviePassword
      responses:
        200:
          description: "successfully login"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully login."
        401:
          description: "invalid username or password"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid username or password."
        404:
          description: "restaurant id not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found."
        
    put:
      tags:
      - "buser"
      summary: "2B: user logout"
      responses:
        200:
          description: "successfully logout"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully logout."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required"

  # Dish
  /dish:
    # Add A New Dish
    post:
      tags:
      - "dish"
      summary: "2B: add a new dish"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Dish object to add into database. Id is not needed"
        required: true
        schema:
          $ref: "#/definitions/Dish"
      responses:
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        200:
          description: "add a new dish successfully"
          schema:
            type: object
            properties:
              dishId:
                type: integer
                example: 3910
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
  
  /dish/<dishId>:      
    # Get A Specific Info of A Dish
    get:
      tags:
      - "dish"
      summary: "2B&2C: get info of a dish"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful query for dish info"
          schema:
            $ref: "#/definitions/Dish"
        404:
          description: "dish not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

    # Update Info of A Dish
    put:
      tags:
      - "dish"
      summary: "2B: update info of a dish"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Dish object with update information. Id is not needed"
        required: true
        schema:
          $ref: "#/definitions/Dish"
      responses:
        200:
          description: "Successful update"
        404:
          description: "dish Not Found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found"
        400:
          description: "Invalid input"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[error message]"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required"
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority."
              
    # DELETE A Dish
    delete:
      tags:
      - "dish"
      summary: "2B: delete a dish"
      consumes:
      - "application/json"
      responses:
        200:
          description: "successfully delete"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully delete."
        404:
          description: "dish not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Dish not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
        403:
          description: "lack of authority"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Lack of authority"
        
  # Get Dishes List
  /dishes:
    get:
      tags:
      - "dish"
      summary: "2B&2C: get dishes list for a certain category"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Identifier of the dishes list"
        required: true
        schema:
          # Identifier of the dish
          type: object
          properties:
            category:
              type: string
              example: "荤菜"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              category:
                type: string
                example: "荤菜"
              dishes:
                type: array
                items:
                  $ref: "#/definitions/Dish"
        404:
          description: "category not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Category not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required"
                        
  # restaurant information
  /rstr/<rstrid>:
    get:
      tags:
      - "rstr"
      summary: "2C: get restaurant info and menu, call it at the beginning"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              id:
                type: string
                example: DDD123
              name:
                type: string
                example: 点都德
              info:
                type: string
                example: Hello, 点都德
              menu:
                $ref: "#/definitions/Menu"
        404:
          description: "restaurant not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Restaurant not found"


  # Customer Operation
  /order/cuid/<userId>/:
    post:
      tags:
      - "order"
      summary: "2C: User place an order"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a new Order. Id is not needed"
        required: true
        schema:
          type: object
          properties:
            tableId:
              type: string
              example: "23E"
            dishes:
              type: array
              items:
                $ref: "#/definitions/Dish"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orderId:
                type: integer
                example: 4396
        400:
          description: "wrong order"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[invalid order form message]"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."
          
  /order/cuid/<userId>/oid/<orderid>:      
    get:
      tags:
      - "order"
      summary: "2C: User get a single order"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found"
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /orders/cuid/<userId>:      
    get:
      tags:
      - "order"
      summary: "2C: User get all orders created by the user"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orders:
                type: array
                items:
                  $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required and you can only get your own order(s)."

  /orders/rstrid/<rstrid>/oid/<orderId>:      
    get:
      tags:
      - "order"
      summary: "2B: Manager get a single order of the restaurant"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required and you can only get your own order."

  /orders/rstrid/<rstrid>:      
    get:
      tags:
      - "order"
      summary: "2B: Manager get all orders of the restaurant"
      consumes:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              orders:
                type: array
                items:
                  $ref: "#/definitions/Order"
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

  /pay:
    post:
      tags:
      - "order"
      summary: "2C: call this api after customer pays the pill"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "payment id and the corresponding order id"
        required: true
        schema:
          type: object
          properties:
            payId:
              type: integer
              example: 2200
            orderId:
              type: integer
              example: 4396
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Successfully pay."
        404:
          description: "order not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order not found."
        400:
          description: "ayid is wrong, no such payment"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Payid is wrong, no such payment."
        401:
          description: "login required"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login required."

# Data Models
definitions:
  Dish:
    type: object
    properties:
      id:
        type: integer
        example: 3910
      name:
        type: string
        example: "毛血旺"
      category:
        type: string
        example: "荤菜"
      price:
        type: number
        format: "float"
        example: 28.5
      stock:
        type: integer
        format: "int32"
        example: 99
      avaliable:
        type: "boolean"
        example: true
      likes:
        type: integer
        example: 4
      description:
        type: string
        example: "Hello 毛血旺"
    required:
    - name
    - price

  Menu:
    type: object
    properties:
      id:
        type: integer
        example: 10
      name:
        type: string
        example: "springMenu"
      content:
        type: array
        items:
          type: object
          properties:
            category:
              type: string
              example: "荤菜"
            dishes:
              type: array
              items:
                $ref: "#/definitions/Dish"
    required:
    - name

  Order:
    type: object
    properties:
      orderId:
        type: integer
        example: 4396
      tableId:
        type: string
        example: "23E"
      total:
        type: number
        format: float
        example: 108.3
      due:
        type: number
        format: float
        example: 92.3
      isPay:
        type: boolean
        example: true
      payWay:
        type: string
        example: alipay
      payDate:
        type: string
        format: date-time
        example: "2017-11-23 16:10:10"
      dishes:
        type: array
        items:
          $ref: "#/definitions/Dish"
          